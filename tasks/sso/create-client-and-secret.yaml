- name: "sso - create KeycloakClient client_name={{ client_name }}, cluster_basedomain={{ cluster_basedomain }}"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'templates/sso/keycloakclient.yaml.j2') | from_yaml }}"

- name: "sso - wait for KeycloakClient/{{ client_name }} to reconcile (5 minutes)"
  community.kubernetes.k8s_info:
    api_version: keycloak.org/v1alpha1
    kind: KeycloakClient
    namespace: helms-deep-sso
    name: "{{ client_name }}"
  register: client
  until:
  - client.resources|length > 0
  - client.resources[0].status is defined
  - client.resources[0].status.phase == 'reconciling'
  retries: 10
  delay: 30

#- name: sso - fetch Keycloak admin credential secret
#  community.kubernetes.k8s_info:
#    api_version: v1
#    kind: Secret
#    name: credential-sso
#    namespace: helms-deep-sso
#  register: kc_admin_credential
#
#- name: sso - fetch Keycloak resource for API URL
#  community.kubernetes.k8s_info:
#    api_version: keycloak.org/v1alpha1
#    kind: Keycloak
#    namespace: helms-deep-sso
#    name: sso
#  register: keycloak
#  when:
#    - keycloak is not defined
#
#- name: sso - update protocol mappers for KeycloakClient
#  community.general.keycloak_client:
#    auth_client_id: 'admin-cli'
#    auth_keycloak_url: "{{ keycloak.resources[0].status.internalURL }}/auth"
#    auth_realm: master
#    auth_username: "{{ kc_admin_credential.resources[0].data.ADMIN_USERNAME | b64decode }}"
#    auth_password: "{{ kc_admin_credential.resources[0].data.ADMIN_PASSWORD | b64decode }}"
#    realm: helms-deep
#    client_id: "{{ client_name }}"
#    state: present
#    protocol_mappers:
#      - protocolMapper: oidc-usermodel-property-mapper
#        name: 'username'
#        protocol: openid-connect
#        config:
#          userinfo.token.claim: True
#          user.attribute: username
#          id.token.claim: True
#          access.token.claim: True
#          claim.name: 'preferred_username'
#          jsonType.label: 'String'
#
#      - protocolMapper: oidc-full-name-mapper
#        name: 'full name'
#        protocol: openid-connect
#        config:
#          userinfo.token.claim: True
#          id.token.claim: True
#          access.token.claim: True
#
#      - protocolMapper: oidc-usermodel-property-mapper
#        name: 'email'
#        protocol: openid-connect
#        config:
#          userinfo.token.claim: True
#          user.attribute: email
#          id.token.claim: True
#          access.token.claim: True
#          claim.name: email
#          jsonType.label: 'String'

- name: sso - fetch cluster OAuth client secret
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    namespace: helms-deep-sso
    name: "{{ client.resources[0].status.secondaryResources.Secret[0] }}"
  register: client_secret
