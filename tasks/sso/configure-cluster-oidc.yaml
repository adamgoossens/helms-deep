- name: sso - create Keycloak Resources
  community.kubernetes.k8s:
    definition: "{{ lookup('template', item) | from_yaml }}"
  with_fileglob:
    - bootstrap-templates/sso/keycloak-*.yaml

- name: sso - wait for Keycloak to reconcile (5 minutes)
  community.kubernetes.k8s_info:
    api_version: keycloak.org/v1alpha1
    kind: Keycloak
    namespace: helms-deep-sso
    name: sso
  register: kc
  until:
  - kc.resources|length > 0
  - kc.resources[0].status is defined
  - kc.resources[0].status.phase == 'reconciling'
  retries: 10
  delay: 30

- name: sso - create KeycloakClient for the cluster
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'bootstrap-templates/sso/keycloakclient.yaml.j2') | from_yaml }}"

- name: sso - wait for KeycloakClient to reconcile (5 minutes)
  community.kubernetes.k8s_info:
    api_version: keycloak.org/v1alpha1
    kind: KeycloakClient
    namespace: helms-deep-sso
    name: supervisor-cluster-client
  register: client
  until:
  - client.resources|length > 0
  - client.resources[0].status is defined
  - client.resources[0].status.phase == 'reconciling'
  retries: 10
  delay: 30

- name: sso - fetch Keycloak admin credential secret
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: credential-sso
    namespace: helms-deep-sso
  register: kc_admin_credential

- name: sso - create GroupSync keycloak secret
  community.kubernetes.k8s:
    definition: 
      kind: Secret
      api_version: v1
      metadata:
        name: "helms-deep-group-sync-credentials" 
        namespace: group-sync-operator
      data:
        username: "{{ kc_admin_credential.resources[0].data.ADMIN_USERNAME }}"
        password: "{{ kc_admin_credential.resources[0].data.ADMIN_PASSWORD }}"
      type: Opaque

- name: sso - deploy GroupSync resource
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'bootstrap-templates/sso/groupsync.yaml.j2') | from_yaml }}"
  vars:
    keycloak_url: "{{ kc.resources[0].status.internalURL }}"
 
- name: sso - update protocol mappers for KeycloakClient
  community.general.keycloak_client:
    auth_client_id: 'admin-cli'
    auth_keycloak_url: "{{ kc.resources[0].status.internalURL }}/auth"
    auth_realm: master
    auth_username: "{{ kc_admin_credential.resources[0].data.ADMIN_USERNAME | b64decode }}"
    auth_password: "{{ kc_admin_credential.resources[0].data.ADMIN_PASSWORD | b64decode }}"
    realm: helms-deep
    client_id: helms-deep-supervisor
    state: present
    protocol_mappers:
      - protocolMapper: oidc-usermodel-property-mapper
        name: 'username'
        protocol: openid-connect
        config:
          userinfo.token.claim: True
          user.attribute: username
          id.token.claim: True
          access.token.claim: True
          claim.name: 'preferred_username'
          jsonType.label: 'String'

      - protocolMapper: oidc-full-name-mapper
        name: 'full name'
        protocol: openid-connect
        config:
          userinfo.token.claim: True
          id.token.claim: True
          access.token.claim: True

      - protocolMapper: oidc-usermodel-property-mapper
        name: 'email'
        protocol: openid-connect
        config:
          userinfo.token.claim: True
          user.attribute: email
          id.token.claim: True
          access.token.claim: True
          claim.name: email
          jsonType.label: 'String'

- name: sso - fetch cluster OAuth client secret
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    namespace: helms-deep-sso
    name: "{{ client.resources[0].status.secondaryResources.Secret[0] }}"
  register: client_secret

- name: sso - create required groups
  community.general.keycloak_group:
   auth_client_id: 'admin-cli'
   auth_keycloak_url: "{{ kc.resources[0].status.internalURL }}/auth"
   auth_realm: master
   auth_username: "{{ kc_admin_credential.resources[0].data.ADMIN_USERNAME | b64decode }}"
   auth_password: "{{ kc_admin_credential.resources[0].data.ADMIN_PASSWORD | b64decode }}"
   realm: helms-deep
   name: "{{ group.name }}"
   state: present
  loop: "{{ ssoGroups }}"
  loop_control:
    loop_var: group

- name: sso - create SSO users
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'bootstrap-templates/sso/keycloakuser.yaml.j2') | from_yaml }}"
  loop: "{{ ssoUsers }}"
  loop_control:
    loop_var: user

- name: sso - create OAuth client secret in openshift-config namespace
  community.kubernetes.k8s:
    definition: 
      kind: Secret
      api_version: v1
      metadata:
        name: "helms-deep-sso-client-secret" 
        namespace: openshift-config
      data: 
        clientSecret: "{{ client_secret.resources[0].data.CLIENT_SECRET }}"
      type: Opaque

- name: sso - TODO FIXME UGLY - configure cluster OAuth to HELMS DEEP SSO realm
  community.kubernetes.k8s:
    merge_type: 'merge'
    definition:
      api_version: 'config.openshift.io/v1'
      kind: OAuth
      metadata:
        name: cluster
        namespace: openshift-config
      spec:
        identityProviders:
        - htpasswd:
            fileData:
              name: htpasswd-secret
          mappingMethod: claim
          name: htpasswd_provider
          type: HTPasswd
        - name: "helms-deep-single-sign-on"
          challenge: true
          login: true
          mappingMethod: claim
          type: OpenID
          openID:
            clientID: "helms-deep-supervisor"
            clientSecret:
              name: "helms-deep-sso-client-secret"
            extraScopes:
            - email
            - profile
            extraAuthorizeParameters:
              include_granted_scopes: "true"
            claims:
              preferredUsername:
              - preferred_username
              name:
              - name
              email:
              - email
            issuer: "{{ kc.resources[0].status.internalURL }}/auth/realms/helms-deep"

- set_fact:
    sso_outputs:
      url: "{{ kc.resources[0].status.internalURL }}"
      credentials:
        username: "{{ kc_admin_credential.resources[0].data.ADMIN_USERNAME | b64decode }}"
        password: "{{ kc_admin_credential.resources[0].data.ADMIN_PASSWORD | b64decode }}"

