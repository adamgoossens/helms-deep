---
##################################
#
# Given a list of cluster names in the extra var 'target_namespaces',
# iterate over each and ensure there's a KeycloakClient resource for
# each.
#
##################################
- hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - import_tasks: tasks/k8s-auth.yaml
      vars:
        host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
        validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"
        username: "{{ lookup('env', 'OPENSHIFT_API_USERNAME') }}"
        password: "{{ lookup('env', 'OPENSHIFT_API_PASSWORD') }}"
      tags:
      - k8s

    ########
    # Start main block
    ########
    - when:
        - target_clusters|length > 0
      module_defaults:
        community.kubernetes.k8s_info:
          kubeconfig: "{{ kubeconfig.path }}"
        community.kubernetes.k8s:
          kubeconfig: "{{ kubeconfig.path }}"
        community.kubernetes.helm:
          kubeconfig: "{{ kubeconfig.path }}"
      block:
      - name: prehook - fetch secrets for all clusters (up to 20 min wait)
        community.kubernetes.k8s_info:
          api_version: v1
          kind: Secret
          name: "{{ name }}-cluster-secret"
          namespace: "{{ name }}"
        vars:
          name: "{{ item }}"
        register: secrets
        loop: "{{ target_clusters }}"
        until:
          - secrets.resources|length == 1
        delay: 30
        retries: 20

      # we're going to generate a bunch of kubeconfig files, rather than
      # pass tokens, URLs, etc around.
      #
      - tempfile:
          state: file
        register: kubeconfig_tempfiles
        loop: "{{ target_clusters }}"

      # generate the dict full 'o' cluster secrets, for use in later methods
      # 
      - set_fact:
          cluster_secrets: "{{ cluster_secrets | default({}) | combine(cluster | items2dict) }}"
        vars:
          query: "results[?item=='{{item}}'].resources[0]"
          target_secret: "{{ (secrets | json_query(query)) | first }}"
          cluster_config: "{{ target_secret['data']['config'] | b64decode | from_yaml }}"
          cluster_server: "{{ target_secret['data']['server'] | b64decode }}"
          cluster:
            - key: "{{ item }}"
              value:
                token: "{{ cluster_config['bearerToken'] }}"
                server: "{{ cluster_server }}"
                insecure: "{{ cluster_config['tlsClientConfig']['insecure'] | bool }}"
                kubeconfig: "{{ kubeconfig_tempfiles.results[idx].path }}"
        loop: "{{ target_clusters }}"
        loop_control:
          index_var: idx

      # now fill in the kubeconfig file
      #
      - copy:
          content: "{{ lookup('template', 'bootstrap-templates/kubeconfig.j2') }}"
          dest: "{{ kubeconfig_path }}"
        vars:
          api_url: "{{ cluster_secrets[item]['server'] }}"
          api_username: doesnotmatter
          api_token: "{{ cluster_secrets[item]['token'] }}"
          kubeconfig_path: "{{ cluster_secrets[item]['kubeconfig'] }}"
        loop: "{{ target_clusters }}"

      - name: fetch Keycloak resource
        community.kubernetes.k8s_info:
          api_version: keycloak.org/v1alpha1
          kind: Keycloak
          name: sso
          namespace: helms-deep-sso
        register: keycloak

      - set_fact:
          keycloak_url: "{{ keycloak.resources[0].status.internalURL }}"

      # fetch common data needed for all clusters
      #
      - name: fetch groupsync client secret
        community.kubernetes.k8s_info:
          api_version: v1
          kind: Secret
          namespace: helms-deep-sso
          name: helms-deep-group-sync-credentials
        register: groupsync_credentials

      - include_tasks: tasks/acm/prehook-ensure-keycloakclient.yaml
        vars:
          cluster_secret: "{{ cluster_secrets[item] }}"
          cluster_name: "{{ item }}"
          cluster_namespace: "{{ item }}"
        loop: "{{ target_clusters }}"

      - include_tasks: tasks/acs/deploy-collector.yaml
        vars:
          cluster_kubeconfig: "{{ cluster_secrets[item]['kubeconfig'] }}"
          cluster_secret: "{{ cluster_secrets[item] }}"
          cluster_name: "{{ item }}"
        loop: "{{ target_clusters }}"
