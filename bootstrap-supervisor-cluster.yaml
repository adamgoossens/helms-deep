#
# Take a new OpenTLC cluster and prepare it for a REDSORD demo.
#
# It will:
#   - Strip out the LimitRange from the default project template.
#   - Create the argocd namespace
#   - Install the community argocd operator
#   - Create a new ClusterRoleBinding for the argocd-application-server SA
#     that gives it cluster-admin (naughty, naughty).
#   - Create a new ArgoCD resource to start the server.
#
- hosts: localhost
  connection: local
  gather_facts: false
  module_defaults:
    community.kubernetes.k8s_auth:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS')) | bool }}"

    community.kubernetes.k8s_info:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

    community.kubernetes.k8s:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

  tasks:
    - name: k8s - get kubernetes auth token
      community.kubernetes.k8s_auth:
        username: "{{ lookup('env', 'OPENSHIFT_API_USERNAME') }}"
        password: "{{ lookup('env',' OPENSHIFT_API_PASSWORD') }}"
      register: k8s_auth_results

    - set_fact:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"

    - name: get cluster DNS
      community.kubernetes.k8s_info:
        api_key: "{{ api_key }}"
        api_version: config.openshift.io/v1
        kind: DNS
        namespace: openshift-config
        name: cluster
      register: cluster_dns

    - set_fact:
        cluster_basedomain: "{{ (cluster_dns.resources|first).spec.baseDomain }}"

    - name: apply kubernetes resources - pre-deployment
      community.kubernetes.k8s:
        api_key: "{{ api_key }}"
        merge_type: 'merge'
        definition: "{{ lookup('file', item) | from_yaml }}"
      tags:
        - early-resources
      with_fileglob:
        - "bootstrap-templates/pre-deploy-*.yaml"

    - name: create required namespaces
      community.kubernetes.k8s:
        api_key: "{{ api_key }}"
        definition: "{{ lookup('template', 'bootstrap-templates/namespace.yaml.j2') }}"
      loop_control: 
        loop_var: ns
      loop: "{{ namespaces }}"
      tags:
        - namespaces

    - name: create single-namespace OperatorGroups
      community.kubernetes.k8s:
        api_key: "{{ api_key }}"
        definition: "{{ lookup('template', 'bootstrap-templates/operatorgroup.yaml.j2') }}"
      loop_control:
        loop_var: og
      loop: "{{ singleNamespaceOperatorGroups }}"
      tags:
        - operatorgroups
        - olm

    - name: create operator Subscriptions
      community.kubernetes.k8s:
        api_key: "{{ api_key }}"
        definition: "{{ lookup('template', 'bootstrap-templates/subscription.yaml.j2') }}"
      loop_control:
        loop_var: sub
      loop: "{{ subscriptions }}"
      tags:
        - subscriptions
        - olm

    #####
    # Rollout Keycloak.
    #####
    - tags:
      - sso
      include_tasks: tasks/bootstrap-sso.yaml

    #####
    # Start MCH rollout now; it takes some time.
    #####
    - tags:
      - acm
      include_tasks: tasks/bootstrap-acm.yaml

    ####
    # Start ACS rollout now.
    ####
    - tags:
      - acs
      include_tasks: tasks/bootstrap-acs.yaml
        
    - set_fact:
        output:
          acs: "{{ acs_outputs|default('') }}"
          sso: "{{ sso_outputs|default('') }}"
          acm: "{{ acm_outputs|default('') }}"
          quay: "{{ quay_outputs|default('') }}"

    - debug: var=output
