#
# Take a new OpenTLC cluster and prepare it for a REDSORD demo.
#
# It will:
#   - Strip out the LimitRange from the default project template.
#   - Create the argocd namespace
#   - Install the community argocd operator
#   - Create a new ClusterRoleBinding for the argocd-application-server SA
#     that gives it cluster-admin (naughty, naughty).
#   - Create a new ArgoCD resource to start the server.
#
- hosts: localhost
  connection: local
  gather_facts: false
  module_defaults:
    community.kubernetes.k8s_auth:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS')) | bool }}"

    community.kubernetes.k8s_info:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

    community.kubernetes.k8s:
      host: "{{ lookup('env', 'OPENSHIFT_API_URL') }}"
      validate_certs: "{{ not (lookup('env', 'OPENSHIFT_API_INSECURE_CERTS') | bool) }}"

  tasks:
    - name: k8s - get kubernetes auth token
      community.kubernetes.k8s_auth:
        username: "{{ lookup('env', 'OPENSHIFT_API_USERNAME') }}"
        password: "{{ lookup('env',' OPENSHIFT_API_PASSWORD') }}"
      register: k8s_auth_results

    - name: apply kubernetes resources
      community.kubernetes.k8s:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        merge_type: 'merge'
        definition: "{{ lookup('file', item) | from_yaml }}"
      with_fileglob:
        - "bootstrap-templates/*.yaml"

    - name: wait for argocd to rollout
      community.kubernetes.k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: argoproj.io/v1alpha1
        kind: ArgoCD
        name: helms-deep
        namespace: argocd
      register: argocd
      delay: 5
      retries: 30
      until:
        - argocd.resources | length > 0
        - argocd.resources[0].status is defined
        - "argocd.resources[0].status.phase == 'Available'"

    - name: get route for argocd
      community.kubernetes.k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: route.openshift.io/v1
        kind: Route
        name: helms-deep-server
        namespace: argocd
      register: argocd_server_route

    - name: get argocd login secret
      community.kubernetes.k8s_info:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Secret
        name: helms-deep-cluster
        namespace: argocd
      register: argocd_auth_secret

    - name: get argocd login token
      uri:
        url: "https://{{ argocd_server_route.resources[0].spec.host }}/api/v1/session"
        method: POST
        body_format: json
        body:
          username: "admin"
          password: "{{ argocd_auth_secret.resources[0].data['admin.password'] | b64decode }}"
        validate_certs: false
      register: auth_token_raw

    - set_fact:
        auth_token: "{{ auth_token_raw.json['token'] }}"

    - name: get existing repository
      uri:
        url: "https://{{ argocd_server_route.resources[0].spec.host }}/api/v1/repositories"
        method: GET
        headers:
          Cookie: "argocd.token={{ auth_token }}"
        body_format: json
        body:
          repo: "git@github.com:adamgoossens/dod-devsecops-state.git"
        validate_certs: false
      register: repo
      failed_when:
        - repo.status not in [200, 404]

    - when:
      - repo.json['items'] == None
      name: create repository
      uri:
        url: "https://{{ argocd_server_route.resources[0].spec.host }}/api/v1/repositories"
        method: POST
        headers:
          Cookie: "argocd.token={{ auth_token }}"
        body_format: json
        body:
          name: "devsecops-state"
          repo: "git@github.com:adamgoossens/dod-devsecops-state.git"
          sshPrivateKey: "{{ lookup('file', lookup('env', 'SSH_PRIVATE_KEY_FILE')) }}"
          upsert: "true"
        validate_certs: false
      register: create_repo
